syntax = "proto3";
package snomed;

option go_package = "snomed";
option java_package = "com.eldrix.terminology.server";
option java_outer_classname = "Server";
option java_multiple_files = true;

import "snomed.proto";
import "google/api/annotations.proto";

message SctID {
    int64 identifier=1;
}

// Core SNOMED service; this will provide the core model API
service SnomedCT {

    rpc GetConcept (SctID) returns (Concept) {
        option (google.api.http) = {
            get: "/v1/snomed/concepts/{identifier}"
        };
    };
    
    rpc GetExtendedConcept (SctID) returns (ExtendedConcept) {
        option (google.api.http) = {
            get: "/v1/snomed/concepts/{identifier}/extended"
        };
    };

    rpc GetDescriptions (SctID) returns (stream Description) {
        option (google.api.http) = {
            get: "/v1/snomed/concepts/{identifier}/descriptions"
        };
    };
    
    rpc GetDescription (SctID) returns (Description) {
        option (google.api.http) = { 
            get: "/v1/snomed/descriptions/{identifier}"
        };
    };

    // Translate translates from SNOMED CT to a reference set.
    // If that reference set is a simple reference set, the best matching concept will be found, if possible.
    // If that reference set is a map reference set, the target reference set item(s) will be found.
    rpc Translate (TranslateRequest) returns (TranslateResponse) {
        option (google.api.http) = {
            get: "/v1/snomed/concepts/{concept_id}/translate"
        };
    };

   // Subsumes determines whether one concept subsumes another
   // This is an implementation of the HL7 FHIR terminology service subsumes method
   // (https://www.hl7.org/fhir/terminology-service.html)
   rpc Subsumes(SubsumptionRequest) returns (SubsumptionResponse) {
       option (google.api.http) = {
           get: "/v1/snomed/subsumes"
       };
   };
}

// Search SNOMED service, providing autocompletion / fast free-text search.
service Search {
    rpc Search(SearchRequest) returns (SearchResponse) {
        option (google.api.http) = {
            get: "/v1/snomed/search"
            };
    };
}
