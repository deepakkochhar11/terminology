syntax = "proto3";
package snomed;

option go_package = "snomed";
option java_package = "com.eldrix.terminology.server";
option java_outer_classname = "Server";
option java_multiple_files = true;

import "snomed.proto";
import "google/api/annotations.proto";

message SctID {
    int64 identifier=1;
}

// Core SNOMED service; this will provide the core model API
service SnomedCT {

    rpc GetConcept (SctID) returns (Concept) {
        option (google.api.http) = {
            get: "/v1/snomed/concepts/{identifier}"
        };
    };
    
    rpc GetExtendedConcept (SctID) returns (ExtendedConcept) {
        option (google.api.http) = {
            get: "/v1/snomed/concepts/{identifier}/extended"
        };
    };

    rpc GetDescriptions (SctID) returns (stream Description) {
        option (google.api.http) = {
            get: "/v1/snomed/concepts/{identifier}/descriptions"
        };
    };
    
    rpc GetDescription (SctID) returns (Description) {
        option (google.api.http) = { 
            get: "/v1/snomed/descriptions/{identifier}"
        };
    };

    // CrossMap translates from SNOMED CT to an alternative coding system via a map reference set
    rpc CrossMap(TranslateToRequest) returns (stream ReferenceSetItem) {
        option (google.api.http) = {
            get: "/v1/snomed/concepts/{concept_id}/crossmap"
        };
    };

    // FromCrossMap translates from an external coding system to SNOMED-CT.
    rpc FromCrossMap(TranslateFromRequest) returns (TranslateFromResponse) {
        option (google.api.http) = {
            get: "/v1/snomed/crossmaps/{refset_id}/{s}"
        };
    };

    // Map translates a SNOMED CT concept into the best match within the specified reference set
    rpc Map(TranslateToRequest) returns (Concept) {
        option (google.api.http) = {
            get: "/v1/snomed/concepts/{concept_id}/map"
        };
    };

   // Subsumes determines whether one concept subsumes another
   // This is an implementation of the HL7 FHIR terminology service subsumes method
   // (https://www.hl7.org/fhir/terminology-service.html)
   rpc Subsumes(SubsumptionRequest) returns (SubsumptionResponse) {
       option (google.api.http) = {
           get: "/v1/snomed/subsumes"
       };
   };

   // Parse parses a SNOMED expression (compositional grammar)
   rpc Parse(ParseRequest) returns (Expression) {
       option (google.api.http) = {
           get: "/v1/snomed/expression/parse"
       };
   };

   // Refinements returns the appropriate refinements for this specified concept
   rpc Refinements(RefinementRequest) returns (RefinementResponse) {
        option (google.api.http) = {
            get: "/v1/snomed/concepts/{concept_id}/refinements"
        };
   };
}

// Search SNOMED service, providing autocompletion / fast free-text search.
service Search {
    rpc Search(SearchRequest) returns (SearchResponse) {
        option (google.api.http) = {
            get: "/v1/snomed/search"
            };
    };
}
